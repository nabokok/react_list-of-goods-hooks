{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","initialState","field","isReverse","App","useState","sortField","setSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getSortedGoods","isShowReset","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,iFAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAiCL,IAAME,EAA0B,CAAEC,MAAO,GAAIC,WAAW,GAE3CC,EAAgB,WAC3B,MAAkCC,mBAASJ,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACMC,EA3BR,SAAwBC,EAAiBH,GACvC,IAAMI,EAAa,YAAOD,GAClBP,EAAqBI,EAArBJ,MAAOC,EAAcG,EAAdH,UAkBf,OAhBAO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAIX,IAAUH,EAASe,SACdF,EAAMG,cAAcF,GAGzBX,IAAUH,EAASiB,OACdJ,EAAMK,OAASJ,EAAMI,OAGvB,KAGLd,GACFO,EAAcQ,UAGTR,EAOcS,CAAenB,EAAiBM,GAC/Cc,EAAkC,KAApBd,EAAUJ,OAAgBI,EAAUH,UAYxD,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,EAAUJ,QAAUH,EAASe,WAE3CU,QAAS,kBAAMjB,EAAa,2BACrBD,GADoB,IACTJ,MAAOH,EAASe,aANpC,iCAYA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,EAAUJ,QAAUH,EAASiB,SAE3CQ,QAAS,WACPjB,EAAa,2BAAKD,GAAN,IAAiBJ,MAAOH,EAASiB,WANjD,4BAYA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAajB,EAAUH,YAEzBqB,QA1Cc,WAChBlB,EAAUH,UACZI,EAAa,2BAAKD,GAAN,IAAiBH,WAAW,KAK1CI,EAAa,2BAAKD,GAAN,IAAiBH,WAAW,MA8BpC,qBAUCiB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMjB,EAAaN,IAH9B,sBAUJ,6BACGO,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCnHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8df16ada.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ninterface SortField {\n  field: SortType | '';\n  isReverse: boolean;\n}\n\nfunction getSortedGoods(goods: string[], sortField: SortField): string[] {\n  const preparedGoods = [...goods];\n  const { field, isReverse } = sortField;\n\n  preparedGoods.sort((good1, good2) => {\n    if (field === SortType.Alphabet) {\n      return good1.localeCompare(good2);\n    }\n\n    if (field === SortType.Length) {\n      return good1.length - good2.length;\n    }\n\n    return 0;\n  });\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nconst initialState: SortField = { field: '', isReverse: false };\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(initialState);\n  const visibleGoods = getSortedGoods(goodsFromServer, sortField);\n  const isShowReset = sortField.field !== '' || sortField.isReverse;\n\n  const handleReverse = () => {\n    if (sortField.isReverse) {\n      setSortField({ ...sortField, isReverse: false });\n\n      return;\n    }\n\n    setSortField({ ...sortField, isReverse: true });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField.field !== SortType.Alphabet,\n          })}\n          onClick={() => setSortField(\n            { ...sortField, field: SortType.Alphabet },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField.field !== SortType.Length,\n          })}\n          onClick={() => {\n            setSortField({ ...sortField, field: SortType.Length });\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !sortField.isReverse,\n          })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {isShowReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortField(initialState)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}